@* @model IEnumerable<WebApplication2017_MVC_GuestBook.Models.UserTable>*@

@*  註解： 也可以寫成下面這樣：*@
@using WebApplication2017_MVC_GuestBook.Models     @* 註解： 宣告命名空間 *@
@model IEnumerable<UserTable>
@* 註解： model（資料型態） *@


@*
    // 註解：請問 model與 Model兩個字（除了大小寫不同）有何差異？？
    // @model is "a property of the view" that refers to the model that was passed to the view from the controller.
    // This property is strongly typed based on the data type specified in the @model directive at the top of the view.
    // ***  @model occurs "only once" and specifies the "data type" of the model.
    // ***  Model allows you to reference "the value for the model" passed to the view.

    //  (4) 文章說明： When To Use IEnumerable, ICollection, IList And List（文章後面有一張圖）
    // http://www.claudiobernasconi.ch/2013/07/22/when-to-use-ienumerable-icollection-ilist-and-list/
    //  IEnumerable -- 只用於「唯讀」的資料展示。
    //  ICollection -- 您想修改集合或關心其大小(size)。
    //  IList -- 您想要修改集合，並關心集合中元素的排序和/或位置。

        // (5) https://stackoverflow.com/questions/2876616/returning-ienumerablet-vs-iqueryablet
        // This is quite an important difference, and working on IQueryable<T> can in many cases
        // save you from returning too many rows from the database.
        // Another prime example is doing paging（分頁）:
        // If you use Take and Skip on IQueryable, you will "only get（只拿你要的）" the number of rows requested;
        // doing that on an IEnumerable<T> will cause "all of（全部 / 假分頁）" your rows to be loaded in memory.

        // (5-1) To return IQueryable<T> if you want to enable the developer using your method
        //          to refine（改造） the query you return " before executing".
        // If you want to transport just "a set of Objects" to enumerate over, just take IEnumerable.

        // (5-2) Imagine an IQueryable as that what it is, a "query" for data (which you can refine（改造） if you want to)
        // An IEnumerable is a set of objects (which has already been received or was created) over which you can enumerate.

        // (6) https://www.linkedin.com/pulse/ienumerable-iqueryable-linq-umesh-ghaywat/
        // 文章裡面有兩張圖片說明。
        // IEnumerable<T> -- 唯讀、單一方向（forward direction），無法增加與刪除。
        // IQueryable<T> -- 查詢，尤其是遠端資料庫
        // 結論：The IEnumerable <T> works with collection in local memory（本機的記憶體裡面）
        //            whereas IQueryable<T> works with queryable data provider（如 資料庫）.
        // Both IQueryable<T> and IEnumerable <T> support "lazy loading" of data from remote database servers.

*@


@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>List</title>
</head>
<body>
    <p>
        @Html.ActionLink("Create New（新增）", "Create")
    </p>
    <table class="table" border="1">
        <tr>
            <th>@Html.DisplayNameFor(m => m.UserName)</th>
            <th>@Html.DisplayNameFor(m => m.UserSex)</th>
            <th>@Html.DisplayNameFor(m => m.UserBirthDay)</th>
            <th>@Html.DisplayNameFor(m => m.UserMobilePhone)</th>
            <th></th>
        </tr>
         
        @foreach (var item in Model)    // 註解：請問 model與 Model兩個字（除了大小寫不同）有何差異？？
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.UserName)</td>
                <td>@Html.DisplayFor(modelItem => item.UserSex)</td>
                <td>@Html.DisplayFor(modelItem => item.UserBirthDay)</td>
                <td>@Html.DisplayFor(modelItem => item.UserMobilePhone)</td>
                <td>
                    @Html.ActionLink("Edit（編輯與修改）", "Edit", new { _ID = item.UserId }) |
                    @Html.ActionLink("Details（明細）", "Details", new { _ID = item.UserId }) |
                    @Html.ActionLink("Delete（刪除）", "Delete", new { _ID = item.UserId })
                </td>
            </tr>
        }

    </table>


    <hr />

    <h3>Search文章搜尋 #1</h3>
    <!-- ***************************************************************** -->
    @using (Html.BeginForm("Search", "UserDB", FormMethod.Post))   // 三個參數分別是：(1)動作名稱、(2)控制器名稱、(3)POST或GET
    {
        @:請輸入關鍵字，搜尋「UserName」欄位 --
        @Html.TextBox("_SearchWord") // 必須跟「控制器」裡面 Search動作的「輸入變數」一樣。
        <input type="submit" value="搜尋（請輸入關鍵字）" /> <br /><br />
    }

    <hr />

    <h3>Search文章搜尋 #2</h3>
    <!-- ***************************************************************** -->
    @using (Html.BeginForm("Search2", "UserDB"))   // 三個參數分別是：(1)動作名稱、(2)控制器名稱、(3)POST或GET
    {
        @:請輸入關鍵字，搜尋「UserName」欄位 --
        @Html.TextBox("_ID") // 必須跟「控制器」裡面 Search2動作的「輸入變數 _ID」一樣。
        <input type="submit" value="搜尋#2（請輸入關鍵字）" /> <br /><br />
    }

    <hr />

    <h3>Search文章搜尋 #3</h3>
    <!-- ***************************************************************** -->
    @using (Html.BeginForm("Search3", "UserDB", FormMethod.Get))   // 三個參數分別是：(1)動作名稱、(2)控制器名稱、(3)POST或GET
    {
        @:請輸入關鍵字，搜尋「UserName」欄位 --
        @Html.TextBox("_SearchWord") // 必須跟「控制器」裡面 Search動作的「輸入變數」一樣。
        <input type="submit" value="搜尋#3（請輸入關鍵字）" /> <br /><br />
    }



</body>
</html>
